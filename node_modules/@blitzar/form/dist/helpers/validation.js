function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import { flattenPerSchema } from '@blitzar/utils';
import { isArray, isFunction } from 'is-what';
import { defaultLang } from '../meta/lang';
export function createRequiredRule(requiredFieldErrorMsg) {
  return function (val) {
    return val === 0 || !!val || requiredFieldErrorMsg;
  };
}
/**
 * @typedef ValidationResultField
 * @type {boolean | (string | boolean)[]}
 */

/**
 * @typedef ValidationResultForm
 * @type {{ [fieldId: string]: ValidationResultField }}
 */

/**
 * Validates a field data based on its blueprint
 *
 * @export
 * @param {*} payload
 * @param {Blueprint} { rules = [], required }
 * @param {Context} context
 * @returns {ValidationResultField}
 */

export function validateFieldPerSchema(payload, _ref) {
  var _ref$rules = _ref.rules,
      rules = _ref$rules === void 0 ? [] : _ref$rules,
      required = _ref.required;
  var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var lang = context.lang || defaultLang();
  var rulesEvaluated = !isFunction(rules) ? rules : rules(payload, context);
  var requiredEvaluated = !isFunction(required) ? required : required(payload, context);
  var requiredRule = createRequiredRule(lang.requiredField);
  var rulesToTest = !requiredEvaluated ? rulesEvaluated : [requiredRule].concat(_toConsumableArray(rulesEvaluated));
  var results = rulesToTest.reduce(function (carry, rule) {
    carry.push(rule(payload));
    return carry;
  }, []);
  var hasAnError = Object.values(results).some(function (result) {
    return result !== true;
  });
  return !hasAnError || results;
}
/**
 * Validates a form data based on its schema
 *
 * @export
 * @param {PlainObject} formData the form data in an object that looks like: `{[fieldId: string]: any}`
 * @param {Schema} schema
 * @param {StringObject} [lang] the lang object with at least the key `requiredField` used as error message for required fields
 * @returns {ValidationResultForm}
 */

export function validateFormPerSchema(formData, schema, lang) {
  var schemaObject = !isArray(schema) ? schema : schema.reduce(function (carry, blueprint) {
    carry[blueprint.id] = blueprint;
    return carry;
  }, {});
  var formDataFlatEmpty = Object.keys(schemaObject).reduce(function (carry, key) {
    return Object.assign({}, carry, _defineProperty({}, key, null));
  }, {}); // prettier-ignore

  var formDataFlatCurrent = flattenPerSchema(formData, schema);
  var formDataFlat = Object.assign({}, formDataFlatEmpty, formDataFlatCurrent);
  var resultPerField = Object.entries(formDataFlat).reduce(function (carry, _ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
        fieldId = _ref3[0],
        fieldValue = _ref3[1];

    if (fieldId === 'undefined') return carry;
    var blueprint = schemaObject[fieldId];
    var context = {
      formData: formData,
      formDataFlat: formDataFlat,
      lang: lang || defaultLang()
    };
    carry[fieldId] = !blueprint || validateFieldPerSchema(fieldValue, blueprint, context);
    return carry;
  }, {});
  return resultPerField;
}