import { isArray, isUndefined, isFunction, isFullString, isBoolean, isPlainObject } from 'is-what';
import { getProp } from 'path-to-prop';
export function schemaToQTableColumns(schema) {
  var schemaArray = !isArray(schema) ? [schema] : schema;
  return schemaArray.map(function (blueprint) {
    var id = blueprint.id,
        valueType = blueprint.valueType,
        type = blueprint.type,
        label = blueprint.label,
        align = blueprint.align,
        defaultValue = blueprint.defaultValue,
        sortable = blueprint.sortable,
        parseValue = blueprint.parseValue,
        sort = blueprint.sort,
        format = blueprint.format,
        headerClasses = blueprint.headerClasses,
        headerStyle = blueprint.headerStyle;

    var field = function field(row) {
      var value = getProp(row, id); // todo: can I retrieve the BlitzField context? should I?

      var blitzFieldContext = {
        formData: row,
        fieldInput: function fieldInput() {}
      }; // fieldInput has a chance to be triggered on `parseValue`, and thus needs to be added as fn to make sure it exists on the context but does nothing. We don't want to trigger fieldInput on sorting, therefore it must be an empty fn.

      var valueOrDefaultValue = !isUndefined(value) ? value : isFunction(defaultValue) ? defaultValue(row, blitzFieldContext) : defaultValue;
      if (isFunction(parseValue)) return parseValue(valueOrDefaultValue, blitzFieldContext);
      return valueOrDefaultValue;
    };

    var quasarColumnConfig = {
      name: id,
      field: field,
      label: label,
      align: ['left', 'right', 'center'].includes(align) ? align : [valueType, type].includes('number') ? 'right' : 'left',
      sortable: isBoolean(sortable) ? sortable : id !== 'id',
      sort: isFunction(sort) ? sort : undefined,
      format: isFunction(format) ? format : undefined,
      headerClasses: [isArray, isPlainObject, isFullString].some(function (fn) {
        return fn(headerClasses);
      }) ? headerClasses : undefined,
      headerStyle: [isArray, isPlainObject, isFullString].some(function (fn) {
        return fn(headerStyle);
      }) ? headerStyle : undefined // not sure why i'd want to set these:
      // required,
      // style,
      // classes,

    };
    return quasarColumnConfig;
  });
}