{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport \"core-js/modules/web.structured-clone.js\";\nimport FullBoxVue from \"../components/static/FullBox.vue\";\nimport { BlitzForm } from \"blitzar\";\nimport Vue from \"vue\";\nimport { VTextField, VRadioGroup, VRadio, VSlider, VCheckbox, VSwitch, VSelect } from \"vuetify/lib\";\n// All components that are used in the form need to be globally registered.\nVue.component(\"VTextField\", VTextField);\nVue.component(\"VRadioGroup\", VRadioGroup);\nVue.component(\"VRadio\", VRadio);\nVue.component(\"VSlider\", VSlider);\nVue.component(\"VCheckbox\", VCheckbox);\nVue.component(\"VSwitch\", VSwitch);\nVue.component(\"VSelect\", VSelect);\nimport { getServicioSpecificUser, getSubServicioByNameSpecificUser, getDepartamento, downloadFile, getCiudad, getDocumento, leerCargaMasivaDeSolicitudes, getClientes } from \"@/api\";\nimport MiddleBox from \"@/components/static/MiddleBox.vue\";\nimport searchUserVue from \"../components/searchUser.vue\";\nimport loadingCSS from \"../components/static/loadingCSS.vue\";\nconst valuesServiciodef = {\n  servicio: \"\",\n  subservicio: \"\"\n};\nconst valuesUbicaciondef = {\n  departamento: \"\",\n  ciudad: \"\"\n};\nconst valuesCandidatodef = {\n  nombreCandidato: \"\",\n  tipodocumento: \"\",\n  documento: \"\",\n  numeroCandidato: \"\",\n  correo: \"\",\n  observaciones: \"\"\n};\nexport default {\n  data() {\n    return {\n      valuesServicio: [],\n      CentroCostos: \"\",\n      schemaServicio: [],\n      valuesUbicacion: {\n        departamento: \"\",\n        ciudad: \"\"\n      },\n      msgFormato: \"\",\n      schemaUbicacion: [],\n      componentKey: 0,\n      componentKeyUbicacion: -1,\n      depCiudad: {\n        departamento: \"\",\n        ciudad: \"\"\n      },\n      valuesCandidato: {\n        nombreCandidato: \"\",\n        tipodocumento: \"\",\n        documento: \"\",\n        numeroCandidato: \"\",\n        correo: \"\",\n        observaciones: \"\"\n      },\n      schemaCandidato: [],\n      Images: null,\n      datosUser: {},\n      userSearch: [],\n      userSearchSelected: [],\n      serviciosDefault: [],\n      loading: false\n    };\n  },\n  methods: {\n    descargarExcel() {\n      let filepath = \"../upload/plantillaSolicitudesMasivas.xlsx\";\n      downloadFile(filepath).then(response => {\n        let fileName = filepath.split(\"/\")[2];\n        const url = window.URL.createObjectURL(new Blob([response.data]));\n        const link = document.createElement(\"a\");\n        link.href = url;\n        link.setAttribute(\"download\", fileName);\n        document.body.appendChild(link);\n        link.click();\n      });\n    },\n    validarGenerador() {\n      let usuarioSeleccionado = this.userSearchSelected;\n      let servicio = this.valuesServicio[0].servicio;\n      let subservicio = this.valuesServicio[0].subservicio;\n      let departamento = this.depCiudad.departamento;\n      let ciudad = this.depCiudad.ciudad;\n      if (usuarioSeleccionado != \"\" && servicio != \"\" && subservicio != \"\" && departamento != \"\" && ciudad != \"\") {\n        let str = usuarioSeleccionado + \"\\t\" + servicio + \"\\t\" + subservicio + \"\\t\" + departamento + \"\\t\" + ciudad + \"\\t\";\n        this.msgFormato = \"Formato copiado, lo puede pegar directamente en el excel de la plantilla\";\n        navigator.clipboard.writeText(str);\n      } else {\n        this.msgFormato = \"Faltan datos para llenar\";\n      }\n    },\n    userSearchSelectedFunc(values) {\n      this.userSearchSelected = values;\n    },\n    recargarFormulario() {\n      this.componentKey += 1;\n      this.componentKeyUbicacion -= 1;\n    },\n    uploadFile() {\n      this.Images = this.$refs.file.files[0];\n    },\n    enviarFormulario() {\n      this.loading = true;\n      const formData = new FormData();\n      formData.append(\"file\", this.Images);\n      leerCargaMasivaDeSolicitudes(formData).then(function (response) {\n        const Toast = this.$swal.mixin({\n          toast: true,\n          position: \"top-end\",\n          showConfirmButton: false,\n          timer: 3000,\n          timerProgressBar: true,\n          didOpen: toast => {\n            toast.addEventListener(\"mouseenter\", this.$swal.stopTimer);\n            toast.addEventListener(\"mouseleave\", this.$swal.resumeTimer);\n          }\n        });\n        Toast.fire({\n          icon: \"success\",\n          title: \"Solicitud enviada exitosamente\"\n        });\n        //this.valuesServicio = valuesServiciodef;\n        //this.valuesUbicacion = valuesUbicaciondef;\n        //this.valuesCandidato = valuesCandidatodef;\n        this.recargarFormulario();\n        this.loading = false;\n      }.bind(this));\n    },\n    agregarServicios() {\n      this.schemaServicio.push(structuredClone({\n        servicio: this.serviciosDefault,\n        subservicio: []\n      }));\n      this.valuesServicio.push(structuredClone(valuesServiciodef));\n    },\n    consultaServicio(idEmpresa) {\n      getServicioSpecificUser(idEmpresa).then(function (response) {\n        this.preServicios = response.data;\n        this.serviciosDefault = [];\n        for (let i = 0; i < this.preServicios.length; i++) {\n          this.serviciosDefault.push({\n            id: this.preServicios[i].ID_SERVICIO,\n            nombre: this.preServicios[i].NOMBRE_SERVICIO\n          });\n        }\n        this.schemaServicio = [];\n        this.schemaServicio.push(structuredClone({\n          servicio: this.serviciosDefault,\n          subservicio: []\n        }));\n        this.valuesServicio = [];\n        this.valuesServicio.push(structuredClone(valuesServiciodef));\n\n        //this.agregarServicios();\n        this.recargarFormulario();\n      }.bind(this));\n    },\n    buscarSubservicio(id, indice) {\n      this.valuesServicio[indice].subservicio = \"\";\n      let idUser = this.userSearchSelected;\n      if (this.$dataUser[0].idRol == 8 || this.$dataUser[0].idRol == 2) {\n        idUser = this.$dataUser[0].id;\n      }\n      getSubServicioByNameSpecificUser(id, idUser).then(function (response) {\n        if (response.data.length > 0) {\n          let preSubServicios = response.data;\n          let subserviciosDefault = [];\n          for (let i = 0; i < preSubServicios.length; i++) {\n            subserviciosDefault.push({\n              id: preSubServicios[i].ID_SUBSERVICIO,\n              nombre: preSubServicios[i].NOMBRE_SUBSERVICIO\n            });\n          }\n          this.schemaServicio[indice].subservicio = subserviciosDefault;\n          this.recargarFormulario();\n        }\n      }.bind(this));\n    },\n    consultaCiudad(id) {\n      getCiudad(id).then(function (response) {\n        const indice = 1;\n        if (response.data.length > 0) {\n          const itemsOptionsTemplate = {\n            value: \"\",\n            text: \"Seleccione la ciudad\",\n            disabled: true\n          };\n          const options = [itemsOptionsTemplate];\n          for (let i = 0; i < response.data.length; i++) {\n            // Solución planteada así por un error de referencia de memoria\n            const itemsOptionsTemplate = {\n              value: \"\",\n              text: \"\"\n            };\n            const subTemplate = itemsOptionsTemplate;\n            itemsOptionsTemplate.value = response.data[i].ID_CIUDAD;\n            subTemplate.text = response.data[i].NOMBRE_CIUDAD;\n            options.push(subTemplate);\n          }\n          if (this.schemaUbicacion[indice] == null) {\n            this.schemaUbicacion.splice(indice, 0, {\n              id: \"ciudad\",\n              span: true,\n              component: \"VSelect\",\n              label: \"Ciudad\",\n              items: options\n            });\n          } else {\n            this.schemaUbicacion[indice] = {\n              id: \"ciudad\",\n              span: true,\n              component: \"VSelect\",\n              label: \"Ciudad\",\n              items: options\n            };\n            this.recargarFormulario();\n          }\n        } else {\n          this.schemaUbicacion.splice(indice, 1);\n        }\n      }.bind(this));\n    }\n  },\n  mounted() {\n    if (this.$dataUser[0].idRol == 8 || this.$dataUser[0].idRol == 2) {\n      this.consultaServicio(this.$dataUser[0].id);\n    }\n    getClientes().then(function (response) {\n      this.userSearch = response.data;\n    }.bind(this));\n    getDepartamento().then(function (response) {\n      const indice = 0;\n      const totalForms = 5;\n      const itemsOptionsTemplate = {\n        value: \"\",\n        text: \"Seleccione el departamento\",\n        disabled: true\n      };\n      const options = [itemsOptionsTemplate];\n      for (let i = 0; i < response.data.length; i++) {\n        // Solución planteada así por un error de referencia de memoria\n        const itemsOptionsTemplate = {\n          value: \"\",\n          text: \"\"\n        };\n        const subTemplate = itemsOptionsTemplate;\n        itemsOptionsTemplate.value = response.data[i].ID_DEPARTAMENTO;\n        subTemplate.text = response.data[i].NOMBRE_DEPARTAMENTO;\n        options.push(subTemplate);\n      }\n      if (this.schemaUbicacion[indice] == null) {\n        this.schemaUbicacion.splice(indice, 0, {\n          id: \"departamento\",\n          span: true,\n          component: \"VSelect\",\n          label: \"Departamento\",\n          items: options\n        });\n      } else {\n        this.schemaUbicacion[indice] = {\n          id: \"departamento\",\n          span: true,\n          component: \"VSelect\",\n          label: \"Departamento\",\n          items: options\n        };\n      }\n      this.recargarFormulario();\n    }.bind(this));\n    getDocumento().then(function (response) {\n      const indice = 0;\n      const totalForms = 5;\n      const itemsOptionsTemplate = {\n        value: \"\",\n        text: \"Seleccionar tipo de documento\",\n        disabled: true\n      };\n      const options = [itemsOptionsTemplate];\n      for (let i = 0; i < response.data.length; i++) {\n        // Solución planteada así por un error de referencia de memoria\n        const itemsOptionsTemplate = {\n          value: \"\",\n          text: \"\"\n        };\n        const subTemplate = itemsOptionsTemplate;\n        itemsOptionsTemplate.value = response.data[i].ID_TIPO_DOCUMENTO;\n        subTemplate.text = response.data[i].DESC_COMPLE_TIPO_DOCUMENTOcol;\n        options.push(subTemplate);\n      }\n      const opcionesDocumentos = {\n        id: \"tipodocumento\",\n        span: true,\n        component: \"VSelect\",\n        label: \"Tipo de documento\",\n        items: options\n      };\n      this.schemaCandidato = [{\n        id: \"nombreCandidato\",\n        component: \"VTextField\",\n        label: \"Nombre del candidato\"\n      }, opcionesDocumentos, {\n        id: \"documento\",\n        component: \"VTextField\",\n        label: \"Número de documento\"\n      }, {\n        id: \"numeroCandidato\",\n        component: \"VTextField\",\n        label: \"Número telefónico\"\n      }, {\n        id: \"correo\",\n        component: \"VTextField\",\n        label: \"Correo\"\n      }, {\n        id: \"observaciones\",\n        component: \"VTextField\",\n        label: \"Observaciones\"\n      }];\n      this.recargarFormulario();\n    }.bind(this));\n  },\n  watch: {\n    valuesUbicacion(newValue, oldValue) {\n      if (newValue.departamento && newValue.departamento != oldValue.departamento) {\n        this.valuesUbicacion.ciudad = \"\";\n        this.consultaCiudad(newValue.departamento);\n        for (let departamento in this.schemaUbicacion[0].items) {\n          if (this.schemaUbicacion[0].items[departamento].value == newValue.departamento) {\n            this.depCiudad.departamento = this.schemaUbicacion[0].items[departamento].text;\n          }\n        }\n        // this.depCiudad.departamento =\n      }\n\n      if (newValue.ciudad && newValue.ciudad != oldValue.ciudad) {\n        for (let ciudad in this.schemaUbicacion[1].items) {\n          if (this.schemaUbicacion[1].items[ciudad].value == newValue.ciudad) {\n            this.depCiudad.ciudad = this.schemaUbicacion[1].items[ciudad].text;\n          }\n        }\n      }\n    },\n    userSearchSelected(newValue, oldValue) {\n      this.consultaServicio(newValue);\n    }\n  },\n  components: {\n    FullBoxVue,\n    BlitzForm,\n    MiddleBox,\n    searchUserVue,\n    loadingCSS\n  }\n};","map":{"version":3,"mappings":";;;AA+DA;AACA;AACA;AAEA,SACAA,YACAC,aACAC,QACAC,SACAC,WACAC,SACAC,eACA;AACA;AACAC;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AAEA,SACAC,yBACAC,kCACAC,iBACAC,cACAC,WACAC,cACAC,8BACAC,mBACA;AACA;AACA;AACA;AAEA;EACAC;EACAC;AACA;AAEA;EACAC;EACAC;AACA;AAEA;EACAC;EACAC;EACAC;EACAC;EACAC;EACAC;AACA;AAEA;EACAC;IACA;MACAC;MACAC;MACAC;MAEAC;QACAZ;QACAC;MACA;MACAY;MACAC;MACAC;MACAC;MACAC;QACAjB;QACAC;MACA;MAEAiB;QACAhB;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACAY;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EAEAC;IACAC;MACA;MACAlC;QACA;QACA;QACA;QACAmC;QACAA;QACAC;QACAD;MACA;IACA;IACAE;MACA;MACA;MACA;MACA;MACA;MAEA,IACAC,6BACAjC,kBACAC,qBACAC,sBACAC,cACA;QACA,UACA8B,sBACA,OACAjC,WACA,OACAC,cACA,OACAC,eACA,OACAC,SACA;QACA,kBACA;QACA+B;MACA;QACA;MACA;IACA;IAEAC;MACA;IACA;IACAC;MACA;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;MACA;MACAC;MACAzC,4CACA;QACA;UACA0C;UACAC;UACAC;UACAC;UACAC;UACAC;YACAL;YACAA;UACA;QACA;QACAM;UACAC;UACAC;QACA;QACA;QACA;QACA;QACA;QACA;MACA,aACA;IACA;IAEAC;MACA,yBACAC;QACAlD;QACAC;MACA,GACA;MACA;IACA;IAEAkD;MACA3D,wCACA;QACA;QACA;QACA;UACA;YACA4D;YACAC;UACA;QACA;QACA;QACA,yBACAH;UACAlD;UACAC;QACA,GACA;QACA;QACA;;QAEA;QACA;MACA,aACA;IACA;IAGAqD;MACA;MACA;MACA;QACAC;MACA;MACA9D,kDACA;QACA;UACA;UACA;UACA;YACA+D;cACAJ;cACAC;YACA;UACA;UACA;UACA;QACA;MACA,aACA;IACA;IAEAI;MACA7D,mBACA;QACA;QACA;UACA;YACA8D;YACAC;YACAC;UACA;UAEA;UAEA;YACA;YACA;cACAF;cACAC;YACA;YACA;YACAE;YACAC;YACAC;UACA;UAEA;YACA;cACAX;cACAY;cACAC;cACAC;cACAC;YACA;UACA;YACA;cACAf;cACAY;cACAC;cACAC;cACAC;YACA;YAIA;UACA;QACA;UACA;QACA;MACA,aACA;IACA;EACA;EAEAC;IAEA;MACA;IACA;IAEArE,mBACA;MACA;IACA,aACA;IAGAL,uBACA;MACA;MACA;MACA;QACAgE;QACAC;QACAC;MACA;MAEA;MAEA;QACA;QACA;UACAF;UACAC;QACA;QACA;QACAE;QACAC;QACAC;MACA;MAEA;QACA;UACAX;UACAY;UACAC;UACAC;UACAC;QACA;MACA;QACA;UACAf;UACAY;UACAC;UACAC;UACAC;QACA;MACA;MACA;IACA,aACA;IAEAtE,oBACA;MACA;MACA;MACA;QACA6D;QACAC;QACAC;MACA;MAEA;MAEA;QACA;QACA;UACAF;UACAC;QACA;QACA;QACAE;QACAC;QACAC;MACA;MAEA;QACAX;QACAY;QACAC;QACAC;QACAC;MACA;MAEA,wBACA;QACAf;QACAa;QACAC;MACA,GACAG,oBACA;QACAjB;QACAa;QACAC;MACA,GACA;QACAd;QACAa;QACAC;MACA,GACA;QACAd;QACAa;QACAC;MACA,GACA;QACAd;QACAa;QACAC;MACA,EACA;MAEA;IACA,aACA;EACA;EAEAI;IACAxD;MACA,IACAyD,yBACAA,gDACA;QACA;QACA;QACA;UACA;YACA;UACA;QACA;QACA;MACA;;MAEA;QACA;UACA;YACA;UACA;QACA;MACA;IACA;IACA9C;MACA;IACA;EACA;EAEA+C;IACAC;IACAC;IACAC;IACAC;IACAC;EACA;AACA","names":["VTextField","VRadioGroup","VRadio","VSlider","VCheckbox","VSwitch","VSelect","Vue","getServicioSpecificUser","getSubServicioByNameSpecificUser","getDepartamento","downloadFile","getCiudad","getDocumento","leerCargaMasivaDeSolicitudes","getClientes","servicio","subservicio","departamento","ciudad","nombreCandidato","tipodocumento","documento","numeroCandidato","correo","observaciones","data","valuesServicio","CentroCostos","schemaServicio","valuesUbicacion","msgFormato","schemaUbicacion","componentKey","componentKeyUbicacion","depCiudad","valuesCandidato","schemaCandidato","Images","datosUser","userSearch","userSearchSelected","serviciosDefault","loading","methods","descargarExcel","link","document","validarGenerador","usuarioSeleccionado","navigator","userSearchSelectedFunc","recargarFormulario","uploadFile","enviarFormulario","formData","toast","position","showConfirmButton","timer","timerProgressBar","didOpen","Toast","icon","title","agregarServicios","structuredClone","consultaServicio","id","nombre","buscarSubservicio","idUser","subserviciosDefault","consultaCiudad","value","text","disabled","itemsOptionsTemplate","subTemplate","options","span","component","label","items","mounted","opcionesDocumentos","watch","newValue","components","FullBoxVue","BlitzForm","MiddleBox","searchUserVue","loadingCSS"],"sourceRoot":"src/views","sources":["cargaMasivaSolicitudesView.vue"],"sourcesContent":["<template>\n  <div>\n    <FullBoxVue class=\"shadowHover\">\n      <h1>Cargar plantilla de generación masiva de solicitudes</h1>\n      <a @click=\"descargarExcel\" download><p>Descargar plantilla de solicitudes masivas</p></a>\n    </FullBoxVue>\n    <MiddleBox class=\"shadowHover\">\n      <h2>Generador de Servicios y subservicios para plantilla</h2>\n\n      <searchUserVue\n        v-bind:people=\"userSearch\"\n        @selected=\"userSearchSelectedFunc\"\n      ></searchUserVue>\n      <div v-for=\"(data, index) in schemaServicio\" :key=\"index\">\n        <v-select\n          @change=\"buscarSubservicio(valuesServicio[index].servicio, index)\"\n          v-model=\"valuesServicio[index].servicio\"\n          :items=\"data.servicio\"\n          item-text=\"nombre\"\n          item-value=\"nombre\"\n          label=\"Servicio\"\n        ></v-select>\n        <v-select\n          v-model=\"valuesServicio[index].subservicio\"\n          :items=\"data.subservicio\"\n          item-text=\"nombre\"\n          item-value=\"nombre\"\n          label=\"SubServicio\"\n        ></v-select>\n      </div>\n      <br>\n      <BlitzForm\n        :schema=\"schemaUbicacion\"\n        v-model=\"valuesUbicacion\"\n        :key=\"componentKeyUbicacion\"\n        gridGap=\"0\"\n        labelPosition=\"left\"\n      />\n      {{ msgFormato }}\n      <br />\n      <v-btn @click=\"validarGenerador()\"> Copiar formato </v-btn>\n    </MiddleBox>\n    <MiddleBox class=\"shadowHover\">\n      <h2>Subir plantilla</h2>\n      <div v-if=\"!loading\">\n        <br />\n        <input type=\"file\" @change=\"uploadFile\" ref=\"file\" />\n        <br /><br />\n        <v-btn color=\"primary\" dark @click=\"enviarFormulario\">\n          Enviar Plantilla\n        </v-btn>\n      </div>\n      <div v-else>\n        <loadingCSS>\n          Se están creando las solicitudes... <br>\n          Esto puede tomar unos momentos\n        </loadingCSS>\n      </div>\n    </MiddleBox>\n  </div>\n</template>\n\n<script>\nimport FullBoxVue from \"../components/static/FullBox.vue\";\nimport { BlitzForm } from \"blitzar\";\nimport Vue from \"vue\";\n\nimport {\n  VTextField,\n  VRadioGroup,\n  VRadio,\n  VSlider,\n  VCheckbox,\n  VSwitch,\n  VSelect,\n} from \"vuetify/lib\";\n// All components that are used in the form need to be globally registered.\nVue.component(\"VTextField\", VTextField);\nVue.component(\"VRadioGroup\", VRadioGroup);\nVue.component(\"VRadio\", VRadio);\nVue.component(\"VSlider\", VSlider);\nVue.component(\"VCheckbox\", VCheckbox);\nVue.component(\"VSwitch\", VSwitch);\nVue.component(\"VSelect\", VSelect);\n\nimport {\n  getServicioSpecificUser,\n  getSubServicioByNameSpecificUser,\n  getDepartamento,\n  downloadFile,\n  getCiudad,\n  getDocumento,\n  leerCargaMasivaDeSolicitudes,\n  getClientes,\n} from \"@/api\";\nimport MiddleBox from \"@/components/static/MiddleBox.vue\";\nimport searchUserVue from \"../components/searchUser.vue\";\nimport loadingCSS from \"../components/static/loadingCSS.vue\";\n\nconst valuesServiciodef = {\n  servicio: \"\",\n  subservicio: \"\",\n};\n\nconst valuesUbicaciondef = {\n  departamento: \"\",\n  ciudad: \"\",\n};\n\nconst valuesCandidatodef = {\n  nombreCandidato: \"\",\n  tipodocumento: \"\",\n  documento: \"\",\n  numeroCandidato: \"\",\n  correo: \"\",\n  observaciones: \"\",\n};\n\nexport default {\n  data() {\n    return {\n      valuesServicio: [],\n      CentroCostos: \"\",\n      schemaServicio: [],\n\n      valuesUbicacion: {\n        departamento: \"\",\n        ciudad: \"\",\n      },\n      msgFormato: \"\",\n      schemaUbicacion: [],\n      componentKey: 0,\n      componentKeyUbicacion: -1,\n      depCiudad: {\n        departamento: \"\",\n        ciudad: \"\"\n      },\n\n      valuesCandidato: {\n        nombreCandidato: \"\",\n        tipodocumento: \"\",\n        documento: \"\",\n        numeroCandidato: \"\",\n        correo: \"\",\n        observaciones: \"\",\n      },\n      schemaCandidato: [],\n      Images: null,\n      datosUser: {},\n      userSearch: [],\n      userSearchSelected: [],\n      serviciosDefault: [],\n      loading: false,\n    };\n  },\n\n  methods: {\n    descargarExcel() {\n      let filepath=\"../upload/plantillaSolicitudesMasivas.xlsx\"\n      downloadFile(filepath).then((response) => {\n        let fileName = filepath.split(\"/\")[2];\n        const url = window.URL.createObjectURL(new Blob([response.data]));\n        const link = document.createElement(\"a\");\n        link.href = url;\n        link.setAttribute(\"download\", fileName);\n        document.body.appendChild(link);\n        link.click();\n      });\n    },\n    validarGenerador() {\n      let usuarioSeleccionado = this.userSearchSelected;\n      let servicio = this.valuesServicio[0].servicio;\n      let subservicio = this.valuesServicio[0].subservicio;\n      let departamento = this.depCiudad.departamento;\n      let ciudad = this.depCiudad.ciudad;\n\n      if (\n        usuarioSeleccionado != \"\" &&\n        servicio != \"\" &&\n        subservicio != \"\" &&\n        departamento != \"\" &&\n        ciudad != \"\"\n      ) {\n        let str =\n          usuarioSeleccionado +\n          \"\\t\" +\n          servicio +\n          \"\\t\" +\n          subservicio +\n          \"\\t\" +\n          departamento +\n          \"\\t\" +\n          ciudad +\n          \"\\t\";\n        this.msgFormato =\n          \"Formato copiado, lo puede pegar directamente en el excel de la plantilla\";\n        navigator.clipboard.writeText(str);\n      } else {\n        this.msgFormato = \"Faltan datos para llenar\";\n      }\n    },\n\n    userSearchSelectedFunc(values) {\n      this.userSearchSelected = values;\n    },\n    recargarFormulario() {\n      this.componentKey += 1;\n      this.componentKeyUbicacion -= 1;\n    },\n\n    uploadFile() {\n      this.Images = this.$refs.file.files[0];\n    },\n\n    enviarFormulario() {\n      this.loading = true;\n      const formData = new FormData();\n      formData.append(\"file\", this.Images);\n      leerCargaMasivaDeSolicitudes(formData).then(\n        function (response) {\n          const Toast = this.$swal.mixin({\n            toast: true,\n            position: \"top-end\",\n            showConfirmButton: false,\n            timer: 3000,\n            timerProgressBar: true,\n            didOpen: (toast) => {\n              toast.addEventListener(\"mouseenter\", this.$swal.stopTimer);\n              toast.addEventListener(\"mouseleave\", this.$swal.resumeTimer);\n            },\n          });\n          Toast.fire({\n            icon: \"success\",\n            title: \"Solicitud enviada exitosamente\",\n          });\n          //this.valuesServicio = valuesServiciodef;\n          //this.valuesUbicacion = valuesUbicaciondef;\n          //this.valuesCandidato = valuesCandidatodef;\n          this.recargarFormulario();\n          this.loading = false;\n        }.bind(this)\n      );\n    },\n\n    agregarServicios() {\n      this.schemaServicio.push(\n        structuredClone({\n          servicio: this.serviciosDefault,\n          subservicio: [],\n        })\n      );\n      this.valuesServicio.push(structuredClone(valuesServiciodef));\n    },\n\n    consultaServicio(idEmpresa) {\n      getServicioSpecificUser(idEmpresa).then(\n        function (response) {\n          this.preServicios = response.data;\n          this.serviciosDefault = [];\n          for (let i = 0; i < this.preServicios.length; i++) {\n            this.serviciosDefault.push({\n              id: this.preServicios[i].ID_SERVICIO,\n              nombre: this.preServicios[i].NOMBRE_SERVICIO,\n            });\n          }\n          this.schemaServicio = [];\n          this.schemaServicio.push(\n            structuredClone({\n              servicio: this.serviciosDefault,\n              subservicio: [],\n            })\n          );\n          this.valuesServicio = [];\n          this.valuesServicio.push(structuredClone(valuesServiciodef));\n\n          //this.agregarServicios();\n          this.recargarFormulario();\n        }.bind(this)\n      );\n    },\n\n\n    buscarSubservicio(id, indice) {\n      this.valuesServicio[indice].subservicio = \"\";\n      let idUser = this.userSearchSelected;\n      if (this.$dataUser[0].idRol == 8 || this.$dataUser[0].idRol == 2) {\n        idUser = this.$dataUser[0].id;\n      }\n      getSubServicioByNameSpecificUser(id, idUser).then(\n        function (response) {\n          if (response.data.length > 0) {\n            let preSubServicios = response.data;\n            let subserviciosDefault = [];\n            for (let i = 0; i < preSubServicios.length; i++) {\n              subserviciosDefault.push({\n                id: preSubServicios[i].ID_SUBSERVICIO,\n                nombre: preSubServicios[i].NOMBRE_SUBSERVICIO,\n              });\n            }\n            this.schemaServicio[indice].subservicio = subserviciosDefault;\n            this.recargarFormulario();\n          }\n        }.bind(this)\n      );\n    },\n\n    consultaCiudad(id) {\n      getCiudad(id).then(\n        function (response) {\n          const indice = 1;\n          if (response.data.length > 0) {\n            const itemsOptionsTemplate = {\n              value: \"\",\n              text: \"Seleccione la ciudad\",\n              disabled: true,\n            };\n\n            const options = [itemsOptionsTemplate];\n\n            for (let i = 0; i < response.data.length; i++) {\n              // Solución planteada así por un error de referencia de memoria\n              const itemsOptionsTemplate = {\n                value: \"\",\n                text: \"\",\n              };\n              const subTemplate = itemsOptionsTemplate;\n              itemsOptionsTemplate.value = response.data[i].ID_CIUDAD;\n              subTemplate.text = response.data[i].NOMBRE_CIUDAD;\n              options.push(subTemplate);\n            }\n\n            if (this.schemaUbicacion[indice] == null) {\n              this.schemaUbicacion.splice(indice, 0, {\n                id: \"ciudad\",\n                span: true,\n                component: \"VSelect\",\n                label: \"Ciudad\",\n                items: options,\n              });\n            } else {\n              this.schemaUbicacion[indice] = {\n                id: \"ciudad\",\n                span: true,\n                component: \"VSelect\",\n                label: \"Ciudad\",\n                items: options,\n              };\n\n\n\n              this.recargarFormulario();\n            }\n          } else {\n            this.schemaUbicacion.splice(indice, 1);\n          }\n        }.bind(this)\n      );\n    },\n  },\n\n  mounted() {\n\n    if (this.$dataUser[0].idRol == 8 || this.$dataUser[0].idRol == 2) {\n      this.consultaServicio(this.$dataUser[0].id);\n    }\n\n    getClientes().then(\n      function (response) {\n        this.userSearch = response.data;\n      }.bind(this)\n    );\n\n\n    getDepartamento().then(\n      function (response) {\n        const indice = 0;\n        const totalForms = 5;\n        const itemsOptionsTemplate = {\n          value: \"\",\n          text: \"Seleccione el departamento\",\n          disabled: true,\n        };\n\n        const options = [itemsOptionsTemplate];\n\n        for (let i = 0; i < response.data.length; i++) {\n          // Solución planteada así por un error de referencia de memoria\n          const itemsOptionsTemplate = {\n            value: \"\",\n            text: \"\",\n          };\n          const subTemplate = itemsOptionsTemplate;\n          itemsOptionsTemplate.value = response.data[i].ID_DEPARTAMENTO;\n          subTemplate.text = response.data[i].NOMBRE_DEPARTAMENTO;\n          options.push(subTemplate);\n        }\n\n        if (this.schemaUbicacion[indice] == null) {\n          this.schemaUbicacion.splice(indice, 0, {\n            id: \"departamento\",\n            span: true,\n            component: \"VSelect\",\n            label: \"Departamento\",\n            items: options,\n          });\n        } else {\n          this.schemaUbicacion[indice] = {\n            id: \"departamento\",\n            span: true,\n            component: \"VSelect\",\n            label: \"Departamento\",\n            items: options,\n          };\n        }\n        this.recargarFormulario();\n      }.bind(this)\n    );\n\n    getDocumento().then(\n      function (response) {\n        const indice = 0;\n        const totalForms = 5;\n        const itemsOptionsTemplate = {\n          value: \"\",\n          text: \"Seleccionar tipo de documento\",\n          disabled: true,\n        };\n\n        const options = [itemsOptionsTemplate];\n\n        for (let i = 0; i < response.data.length; i++) {\n          // Solución planteada así por un error de referencia de memoria\n          const itemsOptionsTemplate = {\n            value: \"\",\n            text: \"\",\n          };\n          const subTemplate = itemsOptionsTemplate;\n          itemsOptionsTemplate.value = response.data[i].ID_TIPO_DOCUMENTO;\n          subTemplate.text = response.data[i].DESC_COMPLE_TIPO_DOCUMENTOcol;\n          options.push(subTemplate);\n        }\n\n        const opcionesDocumentos = {\n          id: \"tipodocumento\",\n          span: true,\n          component: \"VSelect\",\n          label: \"Tipo de documento\",\n          items: options,\n        };\n\n        this.schemaCandidato = [\n          {\n            id: \"nombreCandidato\",\n            component: \"VTextField\",\n            label: \"Nombre del candidato\",\n          },\n          opcionesDocumentos,\n          {\n            id: \"documento\",\n            component: \"VTextField\",\n            label: \"Número de documento\",\n          },\n          {\n            id: \"numeroCandidato\",\n            component: \"VTextField\",\n            label: \"Número telefónico\",\n          },\n          {\n            id: \"correo\",\n            component: \"VTextField\",\n            label: \"Correo\",\n          },\n          {\n            id: \"observaciones\",\n            component: \"VTextField\",\n            label: \"Observaciones\",\n          },\n        ];\n\n        this.recargarFormulario();\n      }.bind(this)\n    );\n  },\n\n  watch: {\n    valuesUbicacion(newValue, oldValue) {\n      if (\n        newValue.departamento &&\n        newValue.departamento != oldValue.departamento\n      ) {\n        this.valuesUbicacion.ciudad = \"\";\n        this.consultaCiudad(newValue.departamento);\n        for(let departamento in this.schemaUbicacion[0].items){\n          if(this.schemaUbicacion[0].items[departamento].value == newValue.departamento){\n            this.depCiudad.departamento = this.schemaUbicacion[0].items[departamento].text\n          }\n        }\n        // this.depCiudad.departamento =\n      }\n\n      if(newValue.ciudad && newValue.ciudad != oldValue.ciudad){\n        for(let ciudad in this.schemaUbicacion[1].items){\n          if(this.schemaUbicacion[1].items[ciudad].value == newValue.ciudad){\n            this.depCiudad.ciudad = this.schemaUbicacion[1].items[ciudad].text\n          }\n        }\n      }\n    },\n    userSearchSelected(newValue, oldValue) {\n      this.consultaServicio(newValue);\n    },\n  },\n\n  components: {\n    FullBoxVue,\n    BlitzForm,\n    MiddleBox,\n    searchUserVue,\n    loadingCSS\n  },\n};\n</script>\n\n<style scoped>\ndiv {\n  width: 100%;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}