{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport FullBoxVue from \"../components/static/FullBox.vue\";\nimport { BlitzForm } from \"blitzar\";\nimport Vue from \"vue\";\nimport { VTextField, VRadioGroup, VRadio, VSlider, VCheckbox, VSwitch, VSelect } from \"vuetify/lib\";\n// All components that are used in the form need to be globally registered.\nVue.component(\"VTextField\", VTextField);\nVue.component(\"VRadioGroup\", VRadioGroup);\nVue.component(\"VRadio\", VRadio);\nVue.component(\"VSlider\", VSlider);\nVue.component(\"VCheckbox\", VCheckbox);\nVue.component(\"VSwitch\", VSwitch);\nVue.component(\"VSelect\", VSelect);\nimport { getDocumento, postUser, getRoles } from \"@/api\";\nconst valuesRegisterdef = {\n  nombre: \"\",\n  tipoDocumento: \"\",\n  contacto: \"\",\n  correo: \"\",\n  documento: \"\",\n  rol: \"\"\n};\nexport default {\n  data() {\n    return {\n      valuesRegister: {\n        nombre: \"\",\n        tipoDocumento: \"\",\n        contacto: \"\",\n        correo: \"\",\n        documento: \"\",\n        rol: \"\"\n      },\n      schemaRegister: [{\n        id: \"nombre\",\n        component: \"VTextField\",\n        label: \"Nombre\"\n      },\n      //Id Tipo Documento\n      {}, {\n        id: \"documento\",\n        component: \"VTextField\",\n        label: \"Documento\"\n      }, {\n        id: \"contacto\",\n        component: \"VTextField\",\n        label: \"Teléfono\"\n      }, {\n        id: \"correo\",\n        component: \"VTextField\",\n        label: \"Correo\"\n      },\n      //Info contacto\n      {},\n      //Tipo de rol\n      {}],\n      componentKey: 0\n    };\n  },\n  methods: {\n    recargarFormulario() {\n      this.componentKey += 1;\n    },\n    enviarFormulario() {\n      postUser(this.valuesRegister).then(function (response) {\n        console.log(response);\n        const Toast = this.$swal.mixin({\n          toast: true,\n          position: \"top-end\",\n          showConfirmButton: false,\n          timer: 3000,\n          timerProgressBar: true,\n          didOpen: toast => {\n            toast.addEventListener(\"mouseenter\", this.$swal.stopTimer);\n            toast.addEventListener(\"mouseleave\", this.$swal.resumeTimer);\n          }\n        });\n        Toast.fire({\n          icon: \"success\",\n          title: \"Usuario registrado exitosamente\"\n        });\n        this.valuesRegister = valuesRegisterdef;\n        this.recargarFormulario();\n      }.bind(this));\n    }\n  },\n  mounted() {\n    getDocumento().then(function (response) {\n      const indice = 1;\n      const itemsOptionsTemplate = {\n        value: \"\",\n        text: \"Seleccionar tipo de documento\",\n        disabled: true\n      };\n      const options = [itemsOptionsTemplate];\n      for (let i = 0; i < response.data.length; i++) {\n        // Solución planteada así por un error de referencia de memoria\n        const itemsOptionsTemplate = {\n          value: \"\",\n          text: \"\"\n        };\n        const subTemplate = itemsOptionsTemplate;\n        itemsOptionsTemplate.value = response.data[i].ID_TIPO_DOCUMENTO;\n        subTemplate.text = response.data[i].DESC_TIPO_DOCUMENTO;\n        options.push(subTemplate);\n      }\n      this.schemaRegister[indice] = {\n        id: \"tipoDocumento\",\n        span: true,\n        component: \"VSelect\",\n        label: \"Tipo de documento\",\n        items: options\n      };\n      this.recargarFormulario();\n    }.bind(this)), getRoles().then(function (response) {\n      const indice = 7;\n      const itemsOptionsTemplate = {\n        value: \"\",\n        text: \"Seleccione un rol\",\n        disabled: true\n      };\n      const options = [itemsOptionsTemplate];\n      for (let i = 0; i < response.data.length; i++) {\n        // Solución planteada así por un error de referencia de memoria\n        const itemsOptionsTemplate = {\n          value: \"\",\n          text: \"\"\n        };\n        const subTemplate = itemsOptionsTemplate;\n        itemsOptionsTemplate.value = response.data[i].id;\n        subTemplate.text = response.data[i].nombre;\n        options.push(subTemplate);\n      }\n      this.schemaRegister[indice] = {\n        id: \"rol\",\n        span: true,\n        component: \"VSelect\",\n        label: \"Rol\",\n        items: options\n      };\n      this.recargarFormulario();\n    }.bind(this));\n  },\n  components: {\n    FullBoxVue,\n    BlitzForm\n  }\n};","map":{"version":3,"mappings":";AAqBA;AACA;AACA;AACA,SACAA,YACAC,aACAC,QACAC,SACAC,WACAC,SACAC,eACA;AACA;AACAC;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AAEA;AAEA;EACAC;EACAC;EACAC;EACAC;EACAC;EACAC;AACA;AACA;EACAC;IACA;MACAC;QACAP;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACAG,iBACA;QACAC;QACAC;QACAC;MACA;MACA;MACA,IACA;QACAF;QACAC;QACAC;MACA,GACA;QACAF;QACAC;QACAC;MACA,GACA;QACAF;QACAC;QACAC;MACA;MACA;MACA;MACA;MACA,GACA;MACAC;IACA;EACA;EAEAC;IACAC;MACA;IACA;IACAC;MACAC;QACAC;QACA;UACAC;UACAC;UACAC;UACAC;UACAC;UACAC;YACAL;YACAA;UACA;QACA;QACAM;UACAC;UACAC;QACA;QACA;QACA;MACA;IACA;EACA;EAEAC;IACAC,oBACA;MACA;MACA;QACAC;QACAC;QACAC;MACA;MAEA;MAEA;QACA;QACA;UACAF;UACAC;QACA;QACA;QACAE;QACAC;QACAC;MACA;MAEA;QACAzB;QACA0B;QACAzB;QACAC;QACAyB;MACA;MAEA;IACA,aACA,EACAC,gBACA;MACA;MACA;QACAR;QACAC;QACAC;MACA;MAEA;MAEA;QACA;QACA;UACAF;UACAC;QACA;QACA;QACAE;QACAC;QACAC;MACA;MAEA;QACAzB;QACA0B;QACAzB;QACAC;QACAyB;MACA;MAEA;IACA,aACA;EACA;EACAE;IACAC;IACAC;EACA;AACA","names":["VTextField","VRadioGroup","VRadio","VSlider","VCheckbox","VSwitch","VSelect","Vue","nombre","tipoDocumento","contacto","correo","documento","rol","data","valuesRegister","schemaRegister","id","component","label","componentKey","methods","recargarFormulario","enviarFormulario","postUser","console","toast","position","showConfirmButton","timer","timerProgressBar","didOpen","Toast","icon","title","mounted","getDocumento","value","text","disabled","itemsOptionsTemplate","subTemplate","options","span","items","getRoles","components","FullBoxVue","BlitzForm"],"sourceRoot":"src/views","sources":["RegisterUserView.vue"],"sourcesContent":["<template>\n  <FullBoxVue class=\"shadowHover\">\n    <div class=\"formContent\">\n      <h1>Registrar Usuario</h1>\n      <br />\n      <hr />\n      <br /><br />\n      <BlitzForm\n        :schema=\"schemaRegister\"\n        v-model=\"valuesRegister\"\n        :key=\"componentKey\"\n        gridGap=\"0\"\n        labelPosition=\"left\"\n      />\n\n      <v-btn color=\"primary\" dark @click=\"enviarFormulario\"> Enviar </v-btn>\n    </div>\n  </FullBoxVue>\n</template>\n\n<script>\nimport FullBoxVue from \"../components/static/FullBox.vue\";\nimport { BlitzForm } from \"blitzar\";\nimport Vue from \"vue\";\nimport {\n  VTextField,\n  VRadioGroup,\n  VRadio,\n  VSlider,\n  VCheckbox,\n  VSwitch,\n  VSelect,\n} from \"vuetify/lib\";\n// All components that are used in the form need to be globally registered.\nVue.component(\"VTextField\", VTextField);\nVue.component(\"VRadioGroup\", VRadioGroup);\nVue.component(\"VRadio\", VRadio);\nVue.component(\"VSlider\", VSlider);\nVue.component(\"VCheckbox\", VCheckbox);\nVue.component(\"VSwitch\", VSwitch);\nVue.component(\"VSelect\", VSelect);\n\nimport { getDocumento, postUser, getRoles } from \"@/api\";\n\nconst valuesRegisterdef = {\n        nombre: \"\",\n        tipoDocumento: \"\",\n        contacto: \"\",\n        correo: \"\",\n        documento: \"\",\n        rol: \"\",\n      }\nexport default {\n  data() {\n    return {\n      valuesRegister: {\n        nombre: \"\",\n        tipoDocumento: \"\",\n        contacto: \"\",\n        correo: \"\",\n        documento: \"\",\n        rol: \"\",\n      },\n      schemaRegister: [\n        {\n          id: \"nombre\",\n          component: \"VTextField\",\n          label: \"Nombre\",\n        },\n        //Id Tipo Documento\n        {},\n        {\n          id: \"documento\",\n          component: \"VTextField\",\n          label: \"Documento\",\n        },\n        {\n          id: \"contacto\",\n          component: \"VTextField\",\n          label: \"Teléfono\",\n        },\n        {\n          id: \"correo\",\n          component: \"VTextField\",\n          label: \"Correo\",\n        },\n        //Info contacto\n        {},\n        //Tipo de rol\n        {},\n      ],\n      componentKey: 0,\n    };\n  },\n\n  methods: {\n    recargarFormulario() {\n      this.componentKey += 1;\n    },\n    enviarFormulario() {\n      postUser(this.valuesRegister).then(function (response) {\n        console.log(response)\n        const Toast = this.$swal.mixin({\n          toast: true,\n          position: \"top-end\",\n          showConfirmButton: false,\n          timer: 3000,\n          timerProgressBar: true,\n          didOpen: (toast) => {\n            toast.addEventListener(\"mouseenter\", this.$swal.stopTimer);\n            toast.addEventListener(\"mouseleave\", this.$swal.resumeTimer);\n          },\n        });\n        Toast.fire({\n          icon: \"success\",\n          title: \"Usuario registrado exitosamente\",\n        });\n        this.valuesRegister = valuesRegisterdef;\n        this.recargarFormulario();\n      }.bind(this));\n    },\n  },\n\n  mounted() {\n    getDocumento().then(\n      function (response) {\n        const indice = 1;\n        const itemsOptionsTemplate = {\n          value: \"\",\n          text: \"Seleccionar tipo de documento\",\n          disabled: true,\n        };\n\n        const options = [itemsOptionsTemplate];\n\n        for (let i = 0; i < response.data.length; i++) {\n          // Solución planteada así por un error de referencia de memoria\n          const itemsOptionsTemplate = {\n            value: \"\",\n            text: \"\",\n          };\n          const subTemplate = itemsOptionsTemplate;\n          itemsOptionsTemplate.value = response.data[i].ID_TIPO_DOCUMENTO;\n          subTemplate.text = response.data[i].DESC_TIPO_DOCUMENTO;\n          options.push(subTemplate);\n        }\n\n        this.schemaRegister[indice] = {\n          id: \"tipoDocumento\",\n          span: true,\n          component: \"VSelect\",\n          label: \"Tipo de documento\",\n          items: options,\n        };\n\n        this.recargarFormulario();\n      }.bind(this)\n    ),\n      getRoles().then(\n        function (response) {\n          const indice = 7;\n          const itemsOptionsTemplate = {\n            value: \"\",\n            text: \"Seleccione un rol\",\n            disabled: true,\n          };\n\n          const options = [itemsOptionsTemplate];\n\n          for (let i = 0; i < response.data.length; i++) {\n            // Solución planteada así por un error de referencia de memoria\n            const itemsOptionsTemplate = {\n              value: \"\",\n              text: \"\",\n            };\n            const subTemplate = itemsOptionsTemplate;\n            itemsOptionsTemplate.value = response.data[i].id;\n            subTemplate.text = response.data[i].nombre;\n            options.push(subTemplate);\n          }\n\n          this.schemaRegister[indice] = {\n            id: \"rol\",\n            span: true,\n            component: \"VSelect\",\n            label: \"Rol\",\n            items: options,\n          };\n\n          this.recargarFormulario();\n        }.bind(this)\n      );\n  },\n  components: {\n    FullBoxVue,\n    BlitzForm,\n  },\n};\n</script>\n\n<style></style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}