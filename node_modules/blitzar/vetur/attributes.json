{
  "blitz-field/value": {
    "type": "any",
    "description": "The value of the field. The BlitzForm `formData` is an object with the value of each field and the id for key."
  },
  "blitz-field/id": {
    "type": "string",
    "description": "An `id` is required for the BlitzForm to be able to know which fields have which value.\n\nA string with dot notation will become a nested field in the `formData`."
  },
  "blitz-field/defaultValue": {
    "type": "(formData: Record<string, any>, formContext: FormContext) => any | any",
    "description": "A defaultValue value to be used when the `value` is `undefined`.\n\nYou can also pass a function that will receive two params you can work with: `(formData, context)`\n- `formData` is the value object of your BlitzForm. This will be undefined when BlitzField is used as stand-alone (without BlitzForm) unless you manually pass it.\n- `context` is either your BlitzForm or BlitzField context with many usefull props. See the documentation on Evaluated Props for more info."
  },
  "blitz-field/parseValue": {
    "type": "(val: any) => any",
    "description": "A function that modifies a value before it is used in the actual component. (see `parseInput` for the reverse)"
  },
  "blitz-field/parseInput": {
    "type": "(val: any) => any",
    "description": "A function that modifies a value after user input but before the value is emitted. (see `parseValue` for the reverse)"
  },
  "blitz-field/component": {
    "type": "string | Function | EvaluatedProp<string | Function>",
    "description": "The component to be used for the field. Is mounted via `<component :is=\"component\" />`. You can pass the name of a native HTML5 element or Vue component that is globally registered. You can also import the Vue file and directly pass the imported object, just like you would when you add it to a Vue file's components prop."
  },
  "blitz-field/slots": {
    "type": "{ label?: string | Record<string, any> | Record<string, any>[], default?: string | Record<string, any> | Record<string, any>[] } | EvaluatedProp<{ label?: string | Record<string, any> | Record<string, any>[], default?: string | Record<string, any> | Record<string, any>[] }>",
    "description": "An Object with keys for the slot names and an object for values. The object you pass to a slot is itself applied as a `<component is=\"\" />`.\n\nThe last example below shows how this is actually used under the hood."
  },
  "blitz-field/lang": {
    "type": "{ archive?: string, delete?: string, cancel?: string, edit?: string, save?: string, requiredField?: string, formValidationError?: string } | EvaluatedProp<{ archive?: string, delete?: string, cancel?: string, edit?: string, save?: string, requiredField?: string, formValidationError?: string }>",
    "description": "The text used in the UI for the action buttons and some error messages.\n\nThe example shows how the error message for required fields is overwritten."
  },
  "blitz-field/label": {
    "type": "string | EvaluatedProp<string>",
    "description": "The field label."
  },
  "blitz-field/subLabel": {
    "type": "string | EvaluatedProp<string>",
    "description": "A smaller label for extra info."
  },
  "blitz-field/mode": {
    "type": "'edit' | 'view' | 'disabled' | 'raw' | 'add' | EvaluatedProp<'edit' | 'view' | 'disabled' | 'raw' | 'add'>",
    "description": "The mode represents how fields are rendered\n- `'edit'` — (default) show editable fields based on the schema\n- `'view'` — show each field with `readonly: true`\n- `'disabled'` — show each field with `disabled: true`\n- `'raw'` — used to show raw data of your form (for select components, it will show the data label instead of its value)\n- `'add'` — the same as `'edit'`\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields).",
    "options": [
      "edit",
      "view",
      "disabled",
      "raw",
      "add",
      "view",
      "disabled",
      "raw"
    ]
  },
  "blitz-field/events": {
    "type": "Record<string, (event: any, formContext: FormContext) => any> | EvaluatedProp<Record<string, (event: any, formContext: FormContext) => any>>",
    "description": "An Object with an event name as key and the handler function as value. The function you pass will receive the native event payload as first parameter and the BlitzField context (the component instance) as second: `($event, context) => {}`"
  },
  "blitz-field/required": {
    "type": "boolean | EvaluatedProp<boolean>",
    "description": "Whether or not the field is required or not. If a field is marked 'required' it will add a default rule like so: `[val => (val !== null && val !== undefined) || 'Field is required']`. The default message can be set in the `lang` prop as `requiredField`."
  },
  "blitz-field/rules": {
    "type": "((val: any) => (true | string))[] | EvaluatedProp<((val: any) => (true | string))[]>",
    "description": "An array of rule functions that receive the value of the field as parameter and should return `true` if the rule passes or a `string` if the rule fails. The string represents the error message that is then shown underneath the field in red."
  },
  "blitz-field/evaluatedProps": {
    "type": "array",
    "description": "An array with prop names that should be treated as Evaluated Props when passed a function.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields)."
  },
  "blitz-field/internalLabels": {
    "type": "boolean | undefined | EvaluatedProp<boolean | undefined>",
    "description": "Set to `true` if the component has its own labels and you do not want the BlitzField to show a label.\n\nWhen `true` subLabels will also be hidden and passed to the component instead as a prop called 'hint'.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields)."
  },
  "blitz-field/internalErrors": {
    "type": "boolean | undefined | EvaluatedProp<boolean | undefined>",
    "description": "Set to true if the component has its own error handling. This makes sure it passes on props like `rules` and does nothing with them in the BlitzField.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields)."
  },
  "blitz-field/showCondition": {
    "type": "boolean | EvaluatedProp<boolean>",
    "description": "Setting to `false` will hide the field. When using as an Evaluated Prop it can used to conditionally hide fields based on the other `formData`."
  },
  "blitz-field/readonly": {
    "type": "boolean | 'readonly' | EvaluatedProp<boolean | 'readonly'>",
    "description": "`readonly` defaults to `true` on `mode: 'view'`",
    "options": [
      "readonly"
    ]
  },
  "blitz-field/disabled": {
    "type": "boolean | 'disabled' | EvaluatedProp<boolean | 'disabled'>",
    "description": "`disabled` defaults to `true` on `mode: 'disabled'`",
    "options": [
      "disabled"
    ]
  },
  "blitz-field/labelPosition": {
    "type": "'top' | 'left' | EvaluatedProp<'top' | 'left'>",
    "description": "The position of the label in comparison to the field.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields).",
    "options": [
      "top",
      "left"
    ]
  },
  "blitz-field/fieldStyle": {
    "type": "string | Record<string, boolean> | (string | Record<string, boolean>)[] | EvaluatedProp<string | Record<string, boolean> | (string | Record<string, boolean>)[]>",
    "description": "Custom styling to be applied to the BlitzField. Applied like so `:style=\"fieldStyle\"`. Can be an Evaluated Prop (this is why I opted to have a different name from `style`).\n\nIn a BlitzForm schema you can also just write `style: '...'` and BlitzForm will pass that as fieldStyle for you, because \"style\" is not a valid prop name."
  },
  "blitz-field/fieldClasses": {
    "type": "string | Record<string, boolean> | (string | Record<string, boolean>)[] | EvaluatedProp<string | Record<string, boolean> | (string | Record<string, boolean>)[]>",
    "description": "Custom classes to be applied to the BlitzField. Applied like so `:class=\"fieldClasses\"`. Can be an Evaluated Prop (this is why I opted to have a different name from `class`).\n\nIn a BlitzForm schema you can also just write `class: '...'` and BlitzForm will pass that as `fieldClasses` for you, because \"class\" is not a valid prop name."
  },
  "blitz-field/componentStyle": {
    "type": "string | Record<string, boolean> | (string | Record<string, boolean>)[] | EvaluatedProp<string | Record<string, boolean> | (string | Record<string, boolean>)[]>",
    "description": "Custom styling to be applied to the inner component of BlitzField. Applied like so `:style=\"componentStyle\"`. Can be an Evaluated Prop."
  },
  "blitz-field/componentClasses": {
    "type": "string | Record<string, boolean> | (string | Record<string, boolean>)[] | EvaluatedProp<string | Record<string, boolean> | (string | Record<string, boolean>)[]>",
    "description": "Custom classes to be applied to the inner component of BlitzField. Applied like so `:class=\"componentClasses\"`. Can be an Evaluated Prop."
  },
  "blitz-field/labelStyle": {
    "type": "string | Record<string, boolean> | (string | Record<string, boolean>)[] | EvaluatedProp<string | Record<string, boolean> | (string | Record<string, boolean>)[]>",
    "description": "Custom styling to be applied to the label of BlitzField. Applied like so `:style=\"componentStyle\"`. Can be an Evaluated Prop.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields)."
  },
  "blitz-field/labelClasses": {
    "type": "string | Record<string, boolean> | (string | Record<string, boolean>)[] | EvaluatedProp<string | Record<string, boolean> | (string | Record<string, boolean>)[]>",
    "description": "Custom classes to be applied to the label of BlitzField. Applied like so `:class=\"labelClasses\"`. Can be an Evaluated Prop.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields)."
  },
  "blitz-field/formData": {
    "type": "array",
    "description": "This is the *nested* data of all the fields inside a BlitzForm. (When using BlitzListForm as standalone, this is an array.)\n\nIt's not something you can pass via the schema, but something that BlitzForm will automatically pass to each of its fields so you can use it in Evaluated Props."
  },
  "blitz-field/formDataFlat": {
    "type": "Record<string, any>",
    "description": "This is the *flattened* data of all the fields inside a BlitzForm.\n\nIt's not something you can pass via the schema, but something that BlitzForm will automatically pass to each of its fields so you can use it in Evaluated Props."
  },
  "blitz-field/formId": {
    "type": "string",
    "description": "A manually set 'id' of the BlitzForm. This only exists if you passed an id directly to the BlitzForm.\n\nIt's not something you can pass via the schema, but something that BlitzForm will automatically pass to each of its fields so you can use it in Evaluated Props."
  },
  "blitz-field/formMode": {
    "type": "string",
    "description": "The `mode` of the BlitzForm. A BlitzField inherits the `mode` from the `BlitzForm` via its `mode` prop; however, if you had manually overwritten the mode to be something else, `formMode` can be used to check the current mode of the form. This can be useful inside an evaluated Prop.\n\nIt's not something you can pass via the schema, but something that BlitzForm will automatically pass to each of its fields so you can use it in Evaluated Props.",
    "options": [
      "edit",
      "view",
      "disabled",
      "raw",
      "add"
    ]
  },
  "blitz-field/fieldInput": {
    "type": "(val: any, formContext: FormContext) => void",
    "description": "The `fieldInput` function of BlitzForm. Is passed so it can be used in events. Eg.: `events: { input: (value, { fieldInput } => fieldInput({ id: 'otherField', value }))}`\n\nIt's not something you can pass via the schema, but something that BlitzForm will automatically pass to each of its fields so you can use it in Evaluated Props."
  },
  "blitz-field/rowInput": {
    "type": "(val: any, formContext: FormContext) => void",
    "description": "(only present in BlitzListForm!)\nThe `rowInput` function of BlitzForm. Is passed so it can be used in events. Eg.: `events: { input: (value, { fieldInput } => fieldInput({ id: 'otherField', value }))}`\n\nIt's not something you can pass via the schema, but something that BlitzListForm will automatically pass to each of its fields so you can use it in Evaluated Props."
  },
  "blitz-field/rowIndex": {
    "type": "number",
    "description": "(only present in BlitzListForm!)\nThe current row index of this field.\n\nIt's not something you can pass via the schema, but something that BlitzListForm will automatically pass to each of its fields so you can use it in Evaluated Props."
  },
  "blitz-field/rowData": {
    "type": "Record<string, any>",
    "description": "(only present in BlitzListForm!)\nThis is the *nested* data of all the fields of the row.\n\nIt's not something you can pass via the schema, but something that BlitzListForm will automatically pass to each of its fields so you can use it in Evaluated Props."
  },
  "blitz-field/deleteRow": {
    "type": "() => void",
    "description": "(only present in BlitzListForm!)\nThis is a function that you can call to delete the row.\n\nIt's not something you can pass via the schema, but something that BlitzListForm will automatically pass to each of its fields so you can use it in Evaluated Props."
  },
  "blitz-form/value": {
    "type": "Record<string, any>",
    "description": "An object with the data of the entire form. The object keys are the ids of the fields passed in the `schema`.\n\nTo be used with `:value` or `v-model`."
  },
  "blitz-form/id": {
    "type": "string",
    "description": "A manually set `id` of the BlitzForm. This prop is accessible in the `context` (as `formId`) of any Evaluated Prop and event.\n\nRead more on Evaluated Props in its dedicated page."
  },
  "blitz-form/schema": {
    "type": "array",
    "description": "This is the heart of your BlitzForm. It's the schema that defines what fields will be generated.\n\nThe possible props you can pass are:\n- BlitzField props (see BlitzField API Card in the documentation)\n- any props of the actual component you define"
  },
  "blitz-form/actionButtons": {
    "type": "array",
    "description": "Buttons on top of the form that control the `mode` of the form. The possible pre-made buttons are:\n- `'edit'` — a button which puts the form in 'edit' mode & does `emit('edit')`\n- `'cancel'` — a button which puts the form in 'view' mode & does `emit('cancel')`\n- `'save'` — a button which puts the form in 'edit' mode & does `emit('save', {newData, oldData})`\n- `'delete'` — a red button which does `emit('delete')`\n- `'archive'` — a red button which does `emit('archive')`\n\nYou can also pass custom buttons with the same schema to generate forms.\n\nSee the documentation on Action Buttons for more info.",
    "options": [
      "cancel",
      "save",
      "delete",
      "archive"
    ]
  },
  "blitz-form/actionButtonDefaults": {
    "type": "{ edit?: Record<string, any>, cancel?: Record<string, any>, save?: Record<string, any>, delete?: Record<string, any>, archive?: Record<string, any>, }",
    "description": "You can overwrite the schema used for the default action buttons for edit, cancel, save, delete & archive."
  },
  "blitz-form/actionButtonsPosition": {
    "type": "string",
    "description": "The position of the action buttons.",
    "options": [
      "top",
      "bottom",
      "right",
      "left"
    ]
  },
  "blitz-form/validator": {
    "type": "(newData: Record<string, any>, oldData: Record<string, any>) => (true | string)",
    "description": "A function which serves as global validator for your form. It will receive the edited data as first param and the original data (before user edits) as second. It should return true if all is OK or a string with error message."
  },
  "blitz-form/columnCount": {
    "type": "number",
    "description": "The amount of columns the form should have. Each field can set a specific 'span' to be able to span multiple columns."
  },
  "blitz-form/gridGap": {
    "type": "string",
    "description": "The size of the gap between each field in the form."
  },
  "blitz-form/lang": {
    "type": "{ archive?: string, delete?: string, cancel?: string, edit?: string, save?: string, requiredField?: string, formValidationError?: string } | EvaluatedProp<{ archive?: string, delete?: string, cancel?: string, edit?: string, save?: string, requiredField?: string, formValidationError?: string }>",
    "description": "The text used in the UI for the action buttons and some error messages."
  },
  "blitz-form/mode": {
    "type": "string",
    "description": "The mode represents how fields are rendered\n- `'edit'` — (default) show editable fields based on the schema\n- `'view'` — show each field with `readonly: true`\n- `'disabled'` — show each field with `disabled: true`\n- `'raw'` — used to show raw data of your form (for select components, it will show the data label instead of its value)\n- `'add'` — the same as `'edit'`\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields).",
    "options": [
      "edit",
      "view",
      "disabled",
      "raw",
      "add"
    ]
  },
  "blitz-form/labelPosition": {
    "type": "string|function",
    "description": "The position of the label in comparison to the field.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields).",
    "options": [
      "top",
      "left"
    ]
  },
  "blitz-form/labelStyle": {
    "type": "string | Record<string, boolean> | (string | Record<string, boolean>)[] | EvaluatedProp<string | Record<string, boolean> | (string | Record<string, boolean>)[]>",
    "description": "Custom styling to be applied to the label of BlitzField. Applied like so `:style=\"componentStyle\"`. Can be an Evaluated Prop.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields)."
  },
  "blitz-form/labelClasses": {
    "type": "string | Record<string, boolean> | (string | Record<string, boolean>)[] | EvaluatedProp<string | Record<string, boolean> | (string | Record<string, boolean>)[]>",
    "description": "Custom classes to be applied to the label of BlitzField. Applied like so `:class=\"labelClasses\"`. Can be an Evaluated Prop.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields)."
  },
  "blitz-form/evaluatedProps": {
    "type": "array",
    "description": "An array with prop names that should be treated as Evaluated Props when passed a function.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields)."
  },
  "blitz-form/internalLabels": {
    "type": "boolean | undefined",
    "description": "Set to true if the entire form has its own labels and you do not want the BlitzField to show a label.\n\nWhen `true` subLabels will be passed as a prop called 'hint'.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields)."
  },
  "blitz-form/internalErrors": {
    "type": "boolean | undefined",
    "description": "Set to true if the entire form has its own error handling. This makes sure it passes on props like `rules` and does nothing with them in the BlitzField.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields)."
  },
  "blitz-form/internalErrorsFor": {
    "type": "array",
    "description": "Pass the component names (without `.vue`) that have internal error handling. This makes sure it passes on props like `rules` and does nothing with them in the BlitzField."
  },
  "blitz-form/formComponent": {
    "type": "string | Function",
    "description": "The component that should be used to generate the form. Defaults to QForm. You can pass the name of a native HTML5 element or Vue component that is globally registered. You can also import the Vue file and directly pass the imported object, just like you would when you add it to a Vue file's components prop."
  },
  "blitz-h/options": {
    "type": "array"
  },
  "blitz-list-form/value": {
    "type": "array"
  },
  "blitz-list-form/schema": {
    "type": "array",
    "description": "This is the information on the columns you want to be shown. An array of objects just like a BlitzForm."
  },
  "blitz-list-form/attrsToPass": {
    "type": "array",
    "description": "A list of prop (attribute) names to be passed on to each single BlitzField generated in the list form.\n\nThis is useful when you want to use Evaluated Props in the schema of the mine form but need information from the top level BlitzForm."
  },
  "blitz-list-form/internalErrorsFor": {
    "type": "array",
    "description": "Pass the component names (without `.vue`) that have internal error handling. This makes sure it passes on props like `rules` and does nothing with them in the BlitzField."
  },
  "blitz-list-form/maxRows": {
    "type": "number",
    "description": "Allows to limit the max amount of rows."
  },
  "blitz-list-form/disable": {
    "type": "boolean"
  },
  "blitz-list-form/readonly": {
    "type": "boolean"
  },
  "blitz-grid-list-toggle/value": {
    "type": "boolean",
    "description": "`value: true` represents \"grid mode\" so shows a \"list icon\"\n`value: false` represents \"list mode\" so shows a \"grid icon\""
  },
  "blitz-table/schemaColumns": {
    "type": "array",
    "description": "The schema for the columns you want to generate. (BlitzForm schema format)"
  },
  "blitz-table/schemaGrid": {
    "type": "array",
    "description": "The schema for the grid cards you want to generate. (BlitzForm schema format)"
  },
  "blitz-table/rows": {
    "type": "array",
    "description": "Rows of data to display. Use `rows` instead of the QTables `data`. Renamed for clarity."
  },
  "blitz-table/actionButtons": {
    "type": "array",
    "description": "Action buttons to add to the top right of the table. An array of objects just like a BlitzForm schema.\n\nThere is also one preset button to toggle between grid- and list-view. This is shown by default, or can be included in the schema array as just the string 'grid' like the example below."
  },
  "blitz-table/gridBlitzFormOptions": {
    "type": "object",
    "description": "The BlitzForm options you want to use for the grid cards. Eg. You can pass `{ actionButtons: [] }` here to include some action buttons on each grid card.\n\nPlease note:\n- The `schema` for the grid cards should be set via the `schemaGrid` prop instead of passing it here as `schema`.\n- The BlitzForm used for each grid card will automatically get the row data.\n- See the documentation of BlitzForm for more information on the props you can set."
  },
  "blitz-table/rowStyle": {
    "type": "object|array|string|function",
    "description": "Custom styling to be applied to each row. Applied like so `:style=\"rowStyle\"`"
  },
  "blitz-table/rowClasses": {
    "type": "object|array|string|function",
    "description": "Custom classes to be applied to each row. Applied like so `:class=\"rowClasses\"`"
  },
  "blitz-table/selectionComponentProps": {
    "type": "object",
    "description": "An object that represents the checkbox when the table is in \"selection\" mode. You can tell BlitzTable to use a custom checkbox component instead of the default.\nDefaults to a regular HTML5 checkbox."
  },
  "blitz-table/grid": {
    "type": "boolean"
  },
  "blitz-table/selected": {
    "type": "array"
  },
  "blitz-table/cardClass": {
    "type": "array",
    "description": "CSS classes to apply to the card (when in grid mode).\nYou can pass a function which will be evaluated just like an Evaluated Prop. The first param passed will be the entire row data. The second is `item` scoped slot object from a QTable."
  },
  "blitz-table/cardStyle": {
    "type": "array",
    "description": "CSS style to apply to the card (when in grid mode).\nYou can pass a function which will be evaluated just like an Evaluated Prop. The first param passed will be the entire row data. The second is `item` scoped slot object from a QTable."
  },
  "blitz-table/mode": {
    "type": "string",
    "description": "By default the rows show just the raw data without showing field components. If you set `mode: 'edit'` your entire table will show the actual (editable) component as per your schema."
  },
  "blitz-table/data": {
    "type": "array",
    "description": "Do not use this! Use `rows` instead of the QTables `data`. Renamed for clarity."
  },
  "blitz-table/columns": {
    "type": "",
    "description": "Do not use this! Use `schemaColumns` instead. This is the prop QTable uses to define its columns. BlitzTable uses `schemaColumns` instead."
  },
  "blitz-table/title": {
    "type": "string",
    "description": "A title to be placed above your table."
  },
  "blitz-table/rowKey": {
    "type": "",
    "description": "Do not use this! This is fixed to `id` in a BlitzTable and cannot be changed."
  }
}